// Package workers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package workers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send a request
	// (POST /request)
	RawRequest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RawRequest converts echo context to params.
func (w *ServerInterfaceWrapper) RawRequest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawRequest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/request", wrapper.RawRequest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXS2/bRhD+K4NpgVxoiyvZcs2b+zgIKOLCsZGDqsOKHFnbkLvMcmVFEPjfi32IpEjF",
	"VppechIxO89vvpld7TFVRakkSVNhsscqXVPB3efvlJMh+8Xz/H6FyXyPP2taYYI/jVqrUTAZPdDnDVUG",
	"62iPpVYlaSPIeRKZ/zFUuI/XvMwyrCM0u5IwQa4132FdR6jp80ZoyjCZO3eLRkct/6HUYL2oI5xl1n1G",
	"VapFaYSSmOBMGnomDZpKTRVJI+QzmDXBVulPpN9VMMuw8Sa8ts3hgVKlTzi8dwFhK8y67we4zOCD4WZT",
	"YTQA4bzSK2/+hm4IMoQGGw9DiGxNvke2KGGLKoTkRmkrUJLO6PJTWZH2TX41P8p9yNfVAsfqRYPW7j0v",
	"bM4u9boPoi/odZ+PzrIHjDM8jUhVKlnR2QQ9GMwMFUOqtg7debL/jyyQtD2XAhGqPPsevlhzH/EUQKGT",
	"P9Ia+NCMUMvpVEnL+zjqTfOT5C9c5HyZk0s56LG+3p8q5XlXY9zXeKBCBS4Pl8ljIO6xyR4YXIAfqQjG",
	"cAEe7QgmcAF+OKC2LerXMcivM5dfS7Azk0Fl0lfpzOOwhhDif2CCX5nVN8ycW8VvMeLg9hQrrK6QKzVs",
	"wuOaNAHXBGarwPDnKoF5qopCyYVb6PPgd/G3fFyT1WjP11xmOVXuIqhIv4iUwO/fjvLB/kg7CN8Fdbu3",
	"N0XB9Q4TvJNw99cMjAoWXzEwwuS2yo/+xNpghC+kK18Zu4wvY7cgSpK8FJjgxIkiLLlZO9hHa+K5WWOy",
	"ryMc6fZ+KFW4J47AuoOgAimXsCTgsuEvD+wFpYEf2KtWENK7RJeI5taVvanxgW8PHPGNpMr8qrKdDZsq",
	"aUh6tpVlLlJnNvpysRTSgbRH+sKLMqfeY6VFMWTgwwOz0PB8YwGbs0kMbDoBFl8Di2Ng7BrY1TUwYNMr",
	"YGwKbMyAsTGwmMFkcbwI2xCh4O8PMV4cT1gbwsuaEP7d4TfcqYBD1zbgDTB2C4xZ6RWw+Maf2O9DWs56",
	"3KYLbDr1p2wKtzfeLbvxooWbPT+ebw9vWAPWZDB6sNwZApKpyig7kAu7c230htyg+3vVtXscx2eS5M2A",
	"3qslZ5dP3WdB24vjJtznh8cexG5RvKdtIzjqjMOXDfCdAGNx6MQtBLrYHsW/OJ3422AOGZ/AeRzHTaXo",
	"Tld8k58Y7yf5SaqthD+0VtoH73BdZsA7LbKr8mjtushB2vf8m1uYQDIrlbB/NiKU/qXnV6m7JY5NPjYL",
	"LyzWE8aH2PWi/jcAAP//3FHfYMsMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
